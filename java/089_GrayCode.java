/*
 * The gray code is a binary numeral system where two successive values differ in only one bit.
 * Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.
 * For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:
 * 00 - 0
 * 01 - 1
 * 11 - 3
 * 10 - 2
 * Note:
 * For a given n, a gray code sequence is not uniquely defined.
 * For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.
 * For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.
 */

public class Solution {
	// idea: bit manipulation, the method of gray code generation, refer to Gray code in Wikipedia
	// the (0-based) i-th gray code can be generated by i ^ (i >> 1)
	// n位元的格雷码也可以从n-1位元的格雷码以上下镜射后加上新位元的方式快速得到
	public List<Integer> grayCode(int n) {
		int len = 1 << n;	// there should be 2^n gray codes in total
		List<Integer> res = new ArrayList<Integer>();
		for (int i = 0; i < len; i++) {
			res.add(i ^ (i >> 1));
		}
		return res;
	}

	// follow-up: a. number to gray code: num ^ (num >> 1)
	// b. given gray code (unsigned int num), how to know its 0-based index (binary code)?
	// 二进制码第n位 = 二进制码第(n+1)位 + 格雷码第n位（注：遇到1+1时结果视为0）
	// unsigned int mask;
	// for (mask = num >> 1; mask != 0; mask = mask >> 1) {
	// 	num = num ^ mask;
	// }
	// return num;
	// /*
	//  * A more efficient version, for Gray codes of 32 or fewer bits.
	//  */
	// unsigned int grayToBinary32(unsigned int num) {
	// 	num = num ^ (num >> 16);
	// 	num = num ^ (num >> 8);
	// 	num = num ^ (num >> 4);
	// 	num = num ^ (num >> 2);
	// 	num = num ^ (num >> 1);
	// 	return num;
	// }
}